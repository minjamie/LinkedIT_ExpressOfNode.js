// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 확인 완료
model User {
  id        Int       @id @default(autoincrement())
  firstName String    @map("first_name") @db.VarChar(30)
  lastName  String    @map("last_name") @db.VarChar(30)
  email     String    @db.VarChar(100)
  password  String    @db.VarChar(30)
  provider  String?   @db.VarChar(100)
  snsId     String?   @map("sns_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  isDeleted Boolean?  @default(false) @map("is_deleted")

  Education              Education?
  ContactInformation     ContactInformation?
  EmploymentAnnouncement EmploymentAnnouncement?
  UserImage              UserImage?
  Introduction           Introduction?
  RecruitmentUser        RecruitmentUser?
  Application            Application[]
  Post                   Post[]
  PositionCareer         PositionCareer[]
  PostLike               PostLike[]
  Comment                Comment[]
  CommentLike            CommentLike[]
  Position               Position[]

  follow    Follow[] @relation("follower")
  following Follow[] @relation("following")
  user      Friend[] @relation("user")
  friend    Friend[] @relation("friend")


  @@map("users")
}

// 확인 완료
// model => enum 테이블 변경
enum ScopeOfPublic {
  ANYONE
  CONNECTINOS
  NOONE
  // 기본 컬럼과 제거

  // id Int @id @default(autoincrement())
  // name String @db.VarChar(10)

  // ContactInformation, PositionCareer, Education와 1:1관계 제거
  // ContactInformation ContactInformation?
  // PositionCareer     PositionCareer?
  // Education          Education?

  // commentScopeOfPublic, postScopeOfPublic와도 1:1관계 제거

  // commentScopeOfPublic Post? @relation("comment_scope_of_public")
  // postScopeOfPublic    Post? @relation("post_scope_of_public")

  @@map("scope_of_publics")
}

// 확인 완료
model Introduction {
  id             Int     @id @default(autoincrement())
  anotherName    String? @map("another_name") @db.VarChar(50)
  oneLineProfile String  @map("one_line_profile") @db.VarChar(200)

  position         PositionCareer @relation(fields: [positionCareerId], references: [id])
  positionCareerId Int            @map("position_career_id")
  country          Country        @relation(fields: [countryId], references: [id])
  countryId        Int            @map("country_id")
  // industry 테이블과 Introduction는 1:N관계로 industryId 컬럼 빠져 있어서 추가
  industry         Industry       @relation(fields: [industryId], references: [id])
  industryId       Int            @map("industry_id")
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @unique @map("user_id")

  @@map("introductions")
}

// 확인 완료
model Country {
  id           Int            @id @default(autoincrement())
  countryName  String         @map("country_name") @db.VarChar(100)
  // 무료 json 파일 형식에 맞춰 sortNam, phone_code 컬럼 추가
  sortNam      String         @map("sort_name") @db.VarChar(100)
  phoneCode    String         @map("phone_code") @db.VarChar(100)
  State        State[]
  Introduction Introduction[]

  @@map("countries")
}

// 확인 완료
model State {
  id        Int    @id @default(autoincrement())
  stateName String @map("state_name") @db.VarChar(50)

  country   Country @relation(fields: [countryId], references: [id])
  countryId Int     @map("country_id")

  City City[]

  @@map("states")
}

// 확인 완료
model City {
  id       Int    @id @default(autoincrement())
  cityName String @map("city_name") @db.VarChar(50)

  state   State @relation(fields: [stateId], references: [id])
  stateId Int   @map("state_id")

  @@map("cities")
}

// 확인 완료
model ContactInformation {
  id          Int     @id @default(autoincrement())
  profileUrl  String? @map("profile_url") @db.VarChar(2000)
  phoneNumber String? @map("phone_number") @db.VarChar(30)
  phoneType   Int?    @map("phone_type")
  address     String? @db.VarChar(100)
  email       String? @db.VarChar(100)
  birthYear   Int?    @map("birth_year")
  birthMonth  Int?    @map("birth_month")
  birthDay    Int?    @map("birth_day")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  scopeOfPublic ScopeOfPublic @default(ANYONE)
  // ENUM 테이블 추가하고 1:1 id키 제거
  // contactInformationScopePublic   ScopeOfPublic @relation(fields: [contactInformationScopePublicId], references: [id])
  // contactInformationScopePublicId Int           @unique @map("contact_information_scope_public_id")

  InstantMessenger InstantMessenger[]
  Website          Website[]

  @@map("contact_informations")
}

// 확인 완료
model Website {
  id          Int    @id @default(autoincrement())
  websiteUrl  String @map("website_url") @db.VarChar(300)
  websiteType String @map("website_type") @db.VarChar(50)

  contactInformation   ContactInformation @relation(fields: [contactInformationId], references: [id])
  contactInformationId Int                @map("contact_information_id")

  @@map("websites")
}

// 확인 완료
model InstantMessenger {
  id            Int    @id @default(autoincrement())
  messengerId   String @map("messenger_id") @db.VarChar(100)
  messengerType String @map("messenger_type") @db.VarChar(50)

  contactInformation   ContactInformation @relation(fields: [contactInformationId], references: [id])
  contactInformationId Int                @map("contact_information_id")

  @@map("instant_messengers")
}

// 확인 완료
model Education {
  id              Int     @id @default(autoincrement())
  admissionMonth  Int?    @map("admission_month")
  admissionYear   Int?    @map("admission_year")
  graduationMonth Int?    @map("graduation_month")
  graduationYear  Int?    @map("graduation_year")
  grade           String? @db.VarChar(30)
  activity        String? @db.VarChar(30)
  description     String? @db.VarChar(200)

  college       College       @relation(fields: [collegeId], references: [id])
  collegeId     Int           @map("college_id")
  degree        Degree        @relation(fields: [degreeId], references: [id])
  degreeId      Int           @map("degree_id")
  major         Major         @relation(fields: [majorId], references: [id])
  majorId       Int           @map("major_id")
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @unique @map("user_id")
  scopeOfPublic ScopeOfPublic @default(ANYONE)
  // ENUM 테이블 추가하고 1:1 id키 제거
  // educationScopeOfPublic   ScopeOfPublic @relation(fields: [educationScopeOfPublicId], references: [id])
  // educationScopeOfPublicId Int           @unique @map("education_scope_of_public_id")

  @@map("educations")
}

// 확인 완료
model Degree {
  id   Int    @id @default(autoincrement())
  type String @db.VarChar(50)

  Education Education[]

  @@map("degrees")
}

// 확인 완료
model Major {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  Education Education[]

  @@map("majors")
}

// 확인 완료
model College {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  location String @db.VarChar(100)

  Education Education[]

  @@map("colleges")
}

// 확인 완료
model PositionCareer {
  id                   Int     @id @default(autoincrement())
  // isWorkingAsPositionNow Boolean  @default(true) @map("is_working_as_position_now")
  // isWorkingAsPositionNow=> isCurrentPosition(바뀐 부분)컬럼명 수정
  isCurrentPosition    Boolean @default(true) @map("is_current_position")
  // isEndedPositonNow      Boolean  @default(false) @map("is_ende_d_positon_now")
  // isEndedPositonNow=> isEndCurrentPosition(바뀐 부분) 컬럼명 수정
  isEndCurrentPosition Boolean @default(false) @map("is_end_current_position")

  startDateAt DateTime @map("start_date_at")
  endDateAt   DateTime @map("end_date_at")
  headline    String   @db.VarChar(100)
  description String?  @db.VarChar(2000)

  position         Position       @relation(fields: [positionId], references: [id])
  positionId       Int            @map("position_id")
  company          Company        @relation(fields: [companyId], references: [id])
  companyId        Int            @map("company_id")
  Industry         Industry       @relation(fields: [industryId], references: [id])
  industryId       Int            @map("industry_id")
  User             User           @relation(fields: [userId], references: [id])
  userId           Int            @map("user_id")
  EmploymentType   EmploymentType @relation(fields: [employmentTypeId], references: [id])
  employmentTypeId Int            @map("employment_type_id")

  scopeOfPublic ScopeOfPublic @default(ANYONE)
  // ENUM 테이블 추가하고 1:1 id키 제거
  // positionCareerScopePublic   ScopeOfPublic  @relation(fields: [positionCareerScopePublicId], references: [id])
  // positionCareerScopePublicId Int            @unique @map("position_career_scope_public_id")

  Introduction Introduction[]

  @@map("position_careers")
}

// 확인 완료
model Position {
  id           Int    @id @default(autoincrement())
  positionName String @map("position_name") @db.VarChar(30)

  // currentPosition String @map("current_position") @db.VarChar(30)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  PositionCareer PositionCareer[]

  @@map("positions")
}

// 확인 완료
model Industry {
  id           Int    @id @default(autoincrement())
  industryType String @map("industry_type") @db.VarChar(100)

  PositionCareer PositionCareer[]
  Company        Company[]
  Introduction   Introduction[]

  @@map("industries")
}

// 확인 완료
model UserImage {
  id                Int    @id @default(autoincrement())
  userProfileUrl    String @map("user_profile_url") @db.VarChar(2000)
  userBackgroundUrl String @map("user_background_url") @db.VarChar(2000)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  @@map("user_images")
}

// 확인 완료
model Application {
  id Int @id @default(autoincrement())

  user                     User                   @relation(fields: [userId], references: [id])
  userId                   Int                    @map("user_id")
  employmentAnnouncement   EmploymentAnnouncement @relation(fields: [employmentAnnouncementId], references: [id])
  employmentAnnouncementId Int                    @map("employment_announcement_id")

  @@map("applications")
}

// 확인 완료
model EmploymentType {
  id   Int    @id @default(autoincrement())
  type String @db.VarChar(50)

  PositionCareer         PositionCareer[]
  EmploymentAnnouncement EmploymentAnnouncement[]

  @@map("employment_types")
}

// 확인 완료
model EmploymentAnnouncement {
  id                Int      @id @default(autoincrement())
  headline          String   @db.VarChar(100)
  content           String   @db.MediumText
  createdAt         DateTime @default(now()) @map("created_at")
  numberOfApplicant Int      @map("number_of_applicant")
  // isPossibleSimpleApply Boolean  @map("is_possible_simple_apply")
  // isPossibleSimpleApply 컬럼명  isEasyApply(변경된 컬럼명)으로 수정
  isEasyApply       Boolean  @default(false) @map("is_easy_apply")

  // company 테이블에 있던 salaryInformation 지우고 EmploymentAnnouncement 테이블 컬럼으로 추가
  // salaryInformation     Int      @map("salary_information") => 삭제바람

  employmentType   EmploymentType @relation(fields: [employmentTypeId], references: [id])
  employmentTypeId Int            @map("employment_type_id")
  workType         WorkType       @relation(fields: [workTypeId], references: [id])
  workTypeId       Int            @map("work_type_id")
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @unique @map("user_id")

  CompanyImage CompanyImage[]
  application  Application[]

  @@map("employment_announcements")
}

// 확인 완료
model WorkType {
  id   Int    @id @default(autoincrement())
  type String @db.VarChar(30)

  EmploymentAnnouncement EmploymentAnnouncement[]

  @@map("work_types")
}

// 확인 완료
model PostHashtag {
  id Int @id @default(autoincrement())

  post      Post    @relation(fields: [postId], references: [id])
  postId    Int     @map("post_id")
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  hashtagId Int     @map("hashtag_id")
  //posts_hashtags을 post_hashtags으로 맵핑 수정했음
  @@map("post_hashtags")
}

// 확인 완료
model CompanyImage {
  id                   Int    @id @default(autoincrement())
  companyProfileUrl    String @map("company_profile_url") @db.VarChar(2000)
  companyBackgroundUrl String @map("company_background_url") @db.VarChar(2000)

  company                  Company                @relation(fields: [companyId], references: [id])
  companyId                Int                    @map("company_id")
  employmentAnnouncement   EmploymentAnnouncement @relation(fields: [employmentAnnouncementId], references: [id])
  employmentAnnouncementId Int                    @map("employment_announcement_id")

  @@map("company_images")
}

// 확인 완료
model CommentLike {
  id Int @id @default(autoincrement())

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int     @map("comment_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")

  @@map("comment_likes")
}

// 확인 완료
model RecruitmentUser {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  @@map("recruitment_users")
}

// 확인 완료
model Post {
  id                   Int            @id @default(autoincrement())
  content              String         @db.VarChar(5000)
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @map("updated_at")
  deletedAt            DateTime?      @map("deleted_at")
  isDeleted            Boolean        @default(false) @map("is_deleted")
  likeCount            Int?           @map("like_count")
  // ENUM 테이블 추가하고 1:1 id키 제거
  postScopeOfPublic    ScopeOfPublic  @default(ANYONE)
  commnetScopeOfPublic ScopeOfPublic  @default(ANYONE)
  // commentScopeOfPublic   ScopeOfPublic  @relation("comment_scope_of_public", fields: [commentScopeOfPublicId], references: [id])
  // commentScopeOfPublicId Int            @unique @map("comment_scope_of_public_id")
  // postScopeOfPublic      ScopeOfPublic  @relation("post_scope_of_public", fields: [postScopeOfPublicId], references: [id])
  // postScopeOfPublicId    Int            @unique @map("post_scope_of_public_id")
  user                 User           @relation(fields: [userId], references: [id])
  userId               Int            @map("user_id")
  postAttachment       PostAttachment @relation(fields: [postAttachmentId], references: [id])
  postAttachmentId     Int            @map("post_attachment_id")

  PostHashtag PostHashtag[]
  PostLike    PostLike[]
  Comment     Comment[]

  @@map("posts")
}

// 확인 완료
model Company {
  id               Int     @id @default(autoincrement())
  koreanName       String? @map("korean_name") @db.VarChar(100)
  englishName      String  @map("english_name") @db.VarChar(200)
  introduction     String  @db.MediumText
  location         String  @db.VarChar(100)
  numberOfEmployee String  @map("number_of_employee") @db.VarChar(30)
  // salaryInformation Int     @map("salary_information")

  industry   Industry @relation(fields: [industryId], references: [id])
  industryId Int      @map("industry_id")

  CompanyImage   CompanyImage[]
  PositionCareer PositionCareer[]

  @@map("companies")
}

// 확인 완료
model Hashtag {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(30)

  PostHashtag PostHashtag[]

  @@map("hashtags")
}

// 확인 완료
model Friend {
  user            User          @relation("user", fields: [userId], references: [id])
  userId          Int           @map("user_id")
  friend          User          @relation("friend", fields: [friendId], references: [id])
  friendId        Int           @map("friend_id")
  friendsStatus   FriendsStatus @relation(fields: [friendsStatusId], references: [id])
  friendsStatusId Int           @map("friends_status_id")

  @@id([userId, friendId])
  @@map("friends")
}

// 확인 완료
model FriendsStatus {
  id   Int    @id @default(autoincrement())
  type String @db.VarChar(10)

  Friend Friend[]

  @@map("friend_statuses")
}

// 확인 완료
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(5000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime @map("deleted_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  // 자기 참조 아이디가 있어서 class컬럼 삭제
  order     Int
  likeCount Int      @map("like_count")

  comment   Comment @relation("self_relation_comment", fields: [commentId], references: [id])
  commentId Int     @map("comment_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  post      Post    @relation(fields: [postId], references: [id])
  postId    Int     @map("post_id")

  selfRelationComment Comment[]     @relation("self_relation_comment")
  commentLike         CommentLike[]

  @@map("comments")
}

// 확인 완료
model Follow {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int  @map("follower_id")
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int  @map("following_id")

  @@id([followerId, followingId])
  @@map("follows")
}

// 확인 완료
model PostAttachment {
  id         Int    @id @default(autoincrement())
  imageUrl   String @map("image_url") @db.VarChar(2000)
  media      Bytes  @db.Blob
  imageOrder Int    @map("image_order")

  Post Post[]

  @@map("post_attachments")
}

// 확인 완료
model PostLike {
  id            Int           @id @default(autoincrement())
  // enum 테이블로 수정하여 PostLike테이블과  postLikeStyleId 1: 1관계 삭제
  // postLikeStyle   PostLikeStyle @relation(fields: [postLikeStyleId], references: [id])
  // postLikeStyleId Int           @unique @map("post_like_style_id")
  // enum 테이블의 값을 컬럼으로 추가
  postLikeStyle PostLikeStyle @default(LIKE)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")

  @@map("post_likes")
}

// 확인 완료
enum PostLikeStyle {
  LIKE
  CELEBRATE
  SUPPORT
  LOVE
  INSIGHTFULL
  CURIOUS
  // PostLikeStyle 테이블 enum 테이블로 수정
  // id    Int    @id @default(autoincrement())
  // style String @db.VarChar(30)

  // postLike PostLike?

  @@map("post_like_styles")
}
